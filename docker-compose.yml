version: '3'

services:

  userdb:
    image: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'user-management'
      MYSQL_ROOT_PASSWORD: 'rootpass'
    ports:
      - "3307:3306"
    volumes:
      - my-db1:/var/lib/mysql
    networks:
      demo_net:
        ipv4_address: 172.30.0.2


  devicedb:
    image: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'device-management'
      MYSQL_ROOT_PASSWORD: 'rootpass'
    ports:
      - "3308:3306"
    volumes:
      - my-db2:/var/lib/mysql
    networks:
      demo_net:
        ipv4_address: 172.30.0.3

  monitoringdb:
    image: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'monitoring-microservice'
      MYSQL_ROOT_PASSWORD: 'rootpass'
    ports:
      - "3309:3306"
    volumes:
      - my-db3:/var/lib/mysql
    networks:
      demo_net:
        ipv4_address: 172.30.0.7

  spring-user:
    restart: always
    build:
      context: ./user-management
      dockerfile: ./Dockerfile
    ports:
      - "8082:8080"
    environment:
      - DB_IP=userdb
      - DB_PORT=3306
      - DB_DBNAME=user-management
      - DB_USER=root
      - DB_PASSWORD=rootpass
    networks:
      demo_net:
        ipv4_address: 172.30.0.4

  spring-device:
    restart: always
    build:
      context: ./device-management
      dockerfile: ./Dockerfile
    ports:
      - "8083:8081"
    environment:
      - DB_IP=devicedb
      - DB_PORT=3306
      - DB_DBNAME=device-management
      - DB_USER=root
      - DB_PASSWORD=rootpass
    networks:
      demo_net:
        ipv4_address: 172.30.0.5

  spring-monitoring:
    restart: always
    build:
      context: ./monitoring-microservice
      dockerfile: ./Dockerfile
    ports:
      - "8090:8090"
    environment:
      - DB_IP=monitoringdb
      - DB_PORT=3306
      - DB_DBNAME=monitoring-microservice
      - DB_USER=root
      - DB_PASSWORD=rootpass
    networks:
        demo_net:
            ipv4_address: 172.30.0.6

  spring-chat:
    restart: always
    build:
      context: ./chat-microservice
      dockerfile: ./Dockerfile
    ports:
      - "8091:8091"
    networks:
        demo_net:
            ipv4_address: 172.30.0.9

  rabbitmq:
    image: rabbitmq:management
    hostname: rabbitmq
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      demo_net:

  frontend:
    build:
      context: ./energy-management-frontend
      dockerfile: ./Dockerfile
    ports:
       - "3001:3000"
    environment:
      - BACKEND=172.30.0.2
    networks:
      demo_net:
        ipv4_address: 172.30.0.10

volumes:
  my-db1:
  my-db2:
  my-db3:

networks:
  demo_net:
    external: true